@using Blog.PanelAdmin.Pages.Medias
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<div class="main-container">

    <MudButton Color="@Color.Primary" Variant="Variant.Filled" OnClick="OpenImageDialogFromJs">انتخاب تصویر</MudButton>

    <div id="editor-menu-bar" class="mt-2"></div>
    <div class="editor-container" id="editor-container">
        <div id="editor"></div>
    </div>
    <div id="editor-word-count" class="mt-2"></div>
</div>


@code {
    private DotNetObjectReference<CKEditor> dotNetRef;

    [Parameter]
    public string InitialContent{ get; set; }

    [Parameter]
    public EventCallback<string> OnContentChanged { get; set; }
    private IJSObjectReference? module; 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./ckeditor5/main.js");

            dotNetRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("initializeEditor", dotNetRef);
            await SetEditorContent();
        }
    }

    [JSInvokable("OnEditorBlur")]
    public async Task OnEditorBlur(string newContent)
    {
        await OnContentChanged.InvokeAsync(newContent);
    }

    public async Task SetEditorContent()
    {
        if (module == null)
            return;

        await module.InvokeVoidAsync("setEditorContent", InitialContent);
    }

    [JSInvokable("OpenImageDialogFromJS")]
    public async Task OpenImageDialogFromJs()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = DialogService.Show<ImageSelector>("", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var url = result.Data?.ToString();
            await InsertImageInEditor(url);
        }
    }

    private async Task InsertImageInEditor(string imageUrl)
    {
        await module.InvokeVoidAsync("insertImageUrl", imageUrl);
    }


}