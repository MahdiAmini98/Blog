@using Blog.PanelAdmin.Services.Medias
@using FluentValidation
@inject IMediaService MediaService
@inject ISnackbar Snackbar
<MudStack Style="width: 100%">
    <MudForm Model="_model" @bind-IsValid="isValid" Validation="_validationRules">
        <MudItem>

            <MudFileUpload T="IReadOnlyList<IBrowserFile>"
            @ref=_fileUpload
            @bind-Files=_model.Files
            @ondragenter="SetDragClass"
            @ondrop="ClearDragClass"
            @ondragleave="ClearDragClass"
            @ondragend="ClearDragClass"
            Hidden="@false"
            InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
            InputStyle="opacity:0"
            AppendMultipleFiles="true">

                <ActivatorContent>
                    <MudPaper Height="@($"{Height}px")" Outlined="true" Class="@_dragClass">

                        <MudText Typo="Typo.h6">
                            فایل‌های خود را اینجا بکشید و رها کنید یا کلیک کنید
                        </MudText>

                        @foreach (var fileName in _model.Files?.Select(f => f.Name) ?? Enumerable.Empty<string>())
                        {
                            <MudChip Icon="@Icons.Material.Filled.AttachFile" T="string" Color="Color.Dark" Text="@fileName" />
                        }

                    </MudPaper>
                </ActivatorContent>

            </MudFileUpload>

            <MudToolBar Gutters="false" Class="relative d-flex  gap-4">

                @if (IsUploading)
                {
                    <MudProgressLinear Color="Color.Warning" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenFilePickerAsync">
                        انتخاب فایل
                    </MudButton>
                    <MudButton Color="Color.Primary"
                    Variant="Variant.Filled" OnClick="UploadFiles"
                    Disabled="@( !isValid || _model.Files is null || !_model.Files.Any())">
                        شروع آپلود
                    </MudButton>
                    <MudButton Color="Color.Error"
                    Variant="Variant.Filled" OnClick="ClearAsync"
                    Disabled="@(_model.Files is null || !_model.Files.Any())">
                        حذف فایل های انتخاب شده
                    </MudButton>
                }

            </MudToolBar>
        </MudItem>
    </MudForm>
</MudStack>



@code {
    
    [Parameter]
    public int Height { get; set; } = 200;
    
    [Parameter]
    public EventCallback OnFilesUploaded { get; set; }

    private FileUploadModel _model = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private string _dragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private void SetDragClass() => _dragClass += " mud-border-primary";
    private void ClearDragClass() => _dragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";

    private bool isValid = false;
    private bool IsUploading = false;

    private Task OpenFilePickerAsync()
    {
        if (_fileUpload != null)
        {
            _fileUpload.OpenFilePickerAsync();
        }
        return Task.CompletedTask;
    }

    private async Task UploadFiles()
    {
        if (_model.Files is null || _model.Files.Count == 0)
        {
            Snackbar.Add("هیچ فایلی انتخاب نشده است!", MudBlazor.Severity.Warning);
            return;
        }
        IsUploading = true;
        foreach (var file in _model.Files)
        {
            using var streamFile = file.OpenReadStream(200 * 1024 * 1024); // افزایش محدودیت به 200MB
            bool success = await MediaService.UploadMediaAsync(streamFile, file.Name, file.ContentType);
            if (success)
            {
                Snackbar.Add($"فایل {file.Name} آپلود شد", MudBlazor.Severity.Success);

            }
            else
            {
                Snackbar.Add($"{file.Name} خطا در آپلود ", MudBlazor.Severity.Error);
            }
        }

        IsUploading = false;
        _model.Files = new List<IBrowserFile>();
        await ClearAsync();
        await OnFilesUploaded.InvokeAsync();

    }



    private Task ClearAsync()
    {
        if (_fileUpload != null)
        {
            _fileUpload.ClearAsync();
        }
        return Task.CompletedTask;
    }


    public class FileUploadModel
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private FileUploadFluentValidator _validationRules = new();

    public class FileUploadFluentValidator : AbstractValidator<FileUploadModel>
    {
        public FileUploadFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("باید حداقل یک فایل انتخاب کنید.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var validationContext = new ValidationContext<FileUploadModel>((FileUploadModel)model);
            var result = await ValidateAsync(validationContext);

            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }

}