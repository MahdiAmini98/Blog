@page "/posts"
@using Blog.PanelAdmin.Models.Posts
@using Blog.PanelAdmin.Services.Posts
@using Blog.PanelAdmin.Services.Tag
@inject IPostService PostService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ITagService TagService
@inject NavigationManager Navigation

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5" Class="mb-3">مدیریت پست‌ها</MudText>
    <!-- فیلترهای جستجو -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="3">
            <MudTextField @bind-Value="SearchText"
                          Label="جستجو"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          @oninput="OnSearchChanged" />
        </MudItem>

        <MudItem xs="12" sm="3">

            <MudSelect @bind-Value="Tag"
                       Variant=Variant.Text
                       Label="تگ"
                       Placeholder="تگ را انتخاب کنید"
                       Clearable="true"
                       @oninput="OnSearchChanged"
                       Adornment="Adornment.Start">
                @foreach (var tag in _tagsListText)
                {
                    <MudSelectItem Value=tag>@tag</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="2">
            <MudJalaliDatePicker @bind-Date="FromDate" Label="از تاریخ" />
        </MudItem>

        <MudItem xs="12" sm="2">
            <MudJalaliDatePicker @bind-Date="ToDate" Label="تا تاریخ" />
        </MudItem>


        <MudItem xs="12" sm="2" Class="d-flex justify-end">
            <MudButton Color="Color.Primary" Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.FilterList"
                       OnClick="@ApplyFilters">
                اعمال فیلتر
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (Posts == null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Class="mt-4" />
    }
    else if (!Posts.Any())
    {
        <MudText Class="mt-4">هیچ پستی یافت نشد.</MudText>
    }
    else
    {
        <MudTable Items="Posts" Striped="true" Hover="true" Elevation="1" Class="mt-4">
            <HeaderContent>
                <MudTh>عنوان</MudTh>
                <MudTh>نویسنده</MudTh>
                <MudTh>بازدید</MudTh>
                <MudTh>وضعیت</MudTh>
                <MudTh>زمان انتشار</MudTh>
                <MudTh>عملیات</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.AuthorName</MudTd>
                <MudTd>@context.ViewCount</MudTd>
                <MudTd>
                    <MudChip T="string" Color="@GetStatusColor(context.Status)" Text="@context.Status" />

                </MudTd>
                <MudTd>
                    <TimeAgo Date="@context.PublishedDate" />
                </MudTd>
                <MudTd>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" Size="Size.Small"
                               OnClick="@(()=>EditPost(context.Id))">
                        ویرایش
                    </MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" Class="ml-2"
                               OnClick="@(() => DeletePost(context.Id))">
                        حذف
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }


    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudText Color="Color.Error">@ErrorMessage</MudText>
    }
</MudPaper>

@code {

    private List<PostListResponseDto>? Posts;
    private string SearchText = string.Empty;
    private string Tag = string.Empty;
    private DateTime? FromDate;
    private DateTime? ToDate;
    private bool IsLoading = false;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalItems = 0;
    private string ErrorMessage = string.Empty;
    private string[] _tagsListText = Array.Empty<string>();
    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
        var tags = await TagService.GetTagsAsync();
        _tagsListText = tags?.Select(t => t.Name).ToArray() ?? Array.Empty<string>();

    }

    private async Task LoadPosts()
    {
        try
        {
            IsLoading = true;
            var queryParameters = new PostQueryParameters
                {
                    SearchText = SearchText,
                    Tag = Tag,
                    FromDate = FromDate,
                    ToDate = ToDate,
                    Page = CurrentPage,
                    PageSize = PageSize
                };

            var result = await PostService.GetPostsForListAsync(queryParameters);
            Posts = result.Items;
            TotalItems = result.TotalCount;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"خطا در دریافت پست‌ها: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        CurrentPage = 1;
        await LoadPosts();
    }
    private async Task ApplyFilters()
    {
        CurrentPage = 1;
        await LoadPosts();
    }
    private void EditPost(Guid id)
    {
        Navigation.NavigateTo($"/posts/edit/{id}");
    }


    private async Task DeletePost(Guid id)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "حذف پست",
            "آیا از حذف این پست مطمئن هستید؟",
            yesText: "بله", cancelText: "خیر", options: new DialogOptions
                {
                    CloseButton = true,
                    FullScreen = false,
                });

        if (confirmed == true)
        {
            try
            {
                await PostService.DeletePostAsync(id);
                await LoadPosts();
                Snackbar.Add("پست با موفقیت حذف شد.", Severity.Success);
            }
            catch (HttpRequestException ex)
            {
                Snackbar.Add($"خطا در حذف پست: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Published" => Color.Success,
            "Draft" => Color.Warning,
            "Archived" => Color.Secondary,
            _ => Color.Default
        };
    }
}
