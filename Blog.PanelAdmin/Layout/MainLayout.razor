@inherits LayoutComponentBase
@inject NavigationManager nav
@inject IJSRuntime JS

#<!-- #region Mud Blazor -->
@* اضافه کردن کامپوننت  Mud Blazor *@

@* این برای مدیریت تم در  Mud Blazor*@
<MudThemeProvider Theme="theme" IsDarkMode="isDarkMode" />

@*  این برای نمایش tooltip ها و popover ها در  Mud Blazor*@
<MudPopoverProvider />

<!-- #endregion -->


#<!-- #region AuthorizeView -->
@* این
  AuthorizeView
  برای اعتبار سنجی و لاگین یا غیر لاگین کردن کاربر است و سه تا بخش دارد
  1- اگر کاربر لاگین شد چیو بهش نمایش بدم
  2- اگه در حال لاگین بود چیو نمایش بدم
  3- اگه لاگین نبود چیو نمایش بدم
  4- برای اجرای این باید یک پکیج نصب کنی و در  فایل app.razor نیز تنظیماتی دارد
  5- میتونی از policy ها و role ها نیز برای آن استفاده کنی
  *@

<!-- #endregion -->





<MudLayout>
    <MudAppBar Elevation="3">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e)=> ToggleMenu())" />
        <MudText Typo="Typo.h5" Class="ml-3">پنل ادمین بلاگ</MudText>
        <MudSpacer />

        <MudIconButton Icon="@darkLightModeButtonIcon" Color="Color.Inherit" OnClick="ToggleDarkMode" />

        <AuthorizeView>
            <Authorized>
                <MudMenu Icon="@Icons.Material.Filled.Settings"
                         Color="Color.Warning"
                         AriaLabel="Open user menu">
                    <MudMenuItem Label="Profile" />
                    <MudMenuItem Label="My account" />
                    <MudMenuItem Label="خروج از حساب کاربری" Href="/logout" Icon="@Icons.Material.Rounded.Logout"
                                 IconColor="Color.Error" />
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/login" IconColor="Color.Error" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Login">
                    ورود به حساب کاربری
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>

    </MudAppBar>

    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body

    </MudMainContent>
</MudLayout>

@code {

    private bool drawerOpen = true;

    private void ToggleMenu()
    {
        drawerOpen = !drawerOpen;
    }


    //theme

    private MudTheme? theme = null;
    private bool isDarkMode = true;
    private string darkLightModeButtonIcon => isDarkMode switch
    {
        true => Icons.Material.Filled.DarkMode,
        false => Icons.Material.Filled.LightMode
    };

    private async void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("localStorage.setItem", "isDarkMode", isDarkMode.ToString().ToLower());
    }

    protected override async Task OnInitializedAsync()
    {
        var storedMode = await JS.InvokeAsync<string>("localStorage.getItem", "isDarkMode");
        if (!string.IsNullOrEmpty(storedMode))
        {
            isDarkMode = storedMode == "true";
        }

        theme = new MudTheme()
            {

                Typography = new Typography()
                {
                    Default = new DefaultTypography()
                    {
                        FontFamily = new[] { "Dana", "Arial" }
                    }
                },
                PaletteLight = new PaletteLight()
                {
                    Black = "#0D1B2A",
                    AppbarBackground = "rgba(230, 247, 255, 0.85)",
                    AppbarText = "#1B263B",
                    DrawerBackground = "#F0F8FF",
                    DrawerText = "#1B263B",
                    GrayLight = "#DDEAF6",
                    GrayLighter = "#EEF5FB",
                    Background = "#F5FAFF",
                    Surface = "#FFFFFF",
                    Primary = "#1976D2",
                    PrimaryContrastText = "#FFFFFF",
                    Secondary = "#64B5F6",
                    SecondaryContrastText = "#FFFFFF",
                    Error = "#E53935",
                    ErrorContrastText = "#FFFFFF",
                    Success = "#43A047",
                    SuccessContrastText = "#FFFFFF",
                    Warning = "#FFC107",
                    WarningContrastText = "#1B263B",
                    Info = "#0288D1",
                    InfoContrastText = "#FFFFFF",
                },
                PaletteDark = new PaletteDark()
                {
                    Primary = "#7e6fff",
                    Surface = "#1e1e2d",
                    Background = "#1a1a27",
                    BackgroundGray = "#151521",
                    AppbarText = "#92929f",
                    AppbarBackground = "rgba(26,26,39,0.8)",
                    DrawerBackground = "#1a1a27",
                    ActionDefault = "#74718e",
                    ActionDisabled = "#9999994d",
                    ActionDisabledBackground = "#605f6d4d",
                    TextPrimary = "#b2b0bf",
                    TextSecondary = "#92929f",
                    TextDisabled = "#ffffff33",
                    DrawerIcon = "#92929f",
                    DrawerText = "#92929f",
                    GrayLight = "#2a2833",
                    GrayLighter = "#1e1e2d",
                    Info = "#4a86ff",
                    Success = "#3dcb6c",
                    Warning = "#ffb545",
                    Error = "#ff3f5f",
                    LinesDefault = "#33323e",
                    TableLines = "#33323e",
                    Divider = "#292838",
                    OverlayLight = "#1e1e2d80",
                }
            };

    }





} 